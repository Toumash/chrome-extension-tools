/**
 * Utilities for handling cross-platform Svelte compilation differences in tests
 */
import { expect } from 'vitest'

/**
 * Normalizes Svelte compilation output to be consistent across platforms.
 * This addresses differences in add_location$ position values that can vary
 * between Windows and Unix systems due to line endings, file paths, etc.
 */
export function normalizeSvelteOutput(source: string): string {
  // Check if this is Svelte compiled output
  if (!source.includes('add_location$') || !source.includes('generated by Svelte')) {
    return source
  }

  // Normalize add_location$ calls by replacing specific position values with generic placeholders
  // Pattern: add_location$(element, file, line, column, position)
  // The position parameter is what varies across platforms
  return source.replace(
    /add_location\$\(([^,]+),\s*([^,]+),\s*(\d+),\s*(\d+),\s*(\d+)\)/g,
    (_match, element, file, line, column) => {
      // Calculate a normalized position based on line and column
      // This provides a more stable value across platforms
      const normalizedPosition = `<pos-${line}-${column}>`
      return `add_location$(${element}, ${file}, ${line}, ${column}, ${normalizedPosition})`
    }
  )
}

/**
 * Creates a test function that normalizes Svelte output before snapshot comparison
 */
export function createSvelteAwareTest() {
  return (source: string, name: string) => {
    const normalizedSource = normalizeSvelteOutput(source)
    expect(normalizedSource).toMatchSnapshot(name)
  }
}
